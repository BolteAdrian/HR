// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace HR
{
    public partial class MLModelHR
    {
        /// <summary>
        /// model input class for MLModelHR.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Id")]
            public float Id { get; set; }

            [ColumnName(@"Name")]
            public string Name { get; set; }

            [ColumnName(@"Date Apply")]
            public string Date_Apply { get; set; }

            [ColumnName(@"Function Apply")]
            public string Function_Apply { get; set; }

            [ColumnName(@"Function Match")]
            public string Function_Match { get; set; }

            [ColumnName(@"Studies")]
            public string Studies { get; set; }

            [ColumnName(@"Experience")]
            public string Experience { get; set; }

            [ColumnName(@"Observation")]
            public string Observation { get; set; }

            [ColumnName(@"Mode Apply")]
            public string Mode_Apply { get; set; }

            [ColumnName(@"County")]
            public string County { get; set; }

            [ColumnName(@"City")]
            public string City { get; set; }

            [ColumnName(@"BirthDate")]
            public string BirthDate { get; set; }

            [ColumnName(@"Status")]
            public string Status { get; set; }

            [ColumnName(@"OfferStatus")]
            public float OfferStatus { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModelHR.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Id")]
            public float Id { get; set; }

            [ColumnName(@"Name")]
            public float[] Name { get; set; }

            [ColumnName(@"Date Apply")]
            public string Date_Apply { get; set; }

            [ColumnName(@"Function Apply")]
            public float[] Function_Apply { get; set; }

            [ColumnName(@"Function Match")]
            public float[] Function_Match { get; set; }

            [ColumnName(@"Studies")]
            public float[] Studies { get; set; }

            [ColumnName(@"Experience")]
            public float[] Experience { get; set; }

            [ColumnName(@"Observation")]
            public float[] Observation { get; set; }

            [ColumnName(@"Mode Apply")]
            public float[] Mode_Apply { get; set; }

            [ColumnName(@"County")]
            public float[] County { get; set; }

            [ColumnName(@"City")]
            public float[] City { get; set; }

            [ColumnName(@"BirthDate")]
            public float[] BirthDate { get; set; }

            [ColumnName(@"Status")]
            public float[] Status { get; set; }

            [ColumnName(@"OfferStatus")]
            public uint OfferStatus { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModelHR.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
